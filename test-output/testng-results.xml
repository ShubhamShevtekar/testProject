<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="16" failed="1" total="17" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="20748" started-at="2020-07-15T17:25:15Z" finished-at="2020-07-15T17:25:36Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="20748" started-at="2020-07-15T17:25:15Z" finished-at="2020-07-15T17:25:36Z">
      <class name="scenarios.GEO.v1.CountryGraphQL">
        <test-method status="PASS" signature="cleanFolder()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="cleanFolder" is-config="true" duration-ms="18" started-at="2020-07-15T11:25:15Z" finished-at="2020-07-15T11:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanFolder -->
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="beforeSuite" is-config="true" duration-ms="3" started-at="2020-07-15T11:25:15Z" finished-at="2020-07-15T11:25:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="getToken()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getToken" is-config="true" duration-ms="893" started-at="2020-07-15T11:25:15Z" finished-at="2020-07-15T11:25:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getToken -->
        <test-method status="PASS" signature="startReport()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startReport" is-config="true" duration-ms="183" started-at="2020-07-15T11:25:16Z" finished-at="2020-07-15T11:25:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="before()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="before" is-config="true" duration-ms="985" started-at="2020-07-15T11:25:16Z" finished-at="2020-07-15T11:25:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="1" started-at="2020-07-15T11:25:17Z" finished-at="2020-07-15T11:25:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="1040" started-at="2020-07-15T11:25:17Z" finished-at="2020-07-15T11:25:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.v1.CountryGraphQL.TC_01()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_01()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_01" duration-ms="17495" started-at="2020-07-15T11:25:18Z" finished-at="2020-07-15T11:25:36Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.v1.CountryGraphQL.countryWithGeoplId(CountryGraphQL.java:1921)
	at scenarios.GEO.v1.CountryGraphQL.TC_01(CountryGraphQL.java:169)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_01 -->
        <test-method status="FAIL" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at scenarios.GEO.v1.CountryGraphQL.after(CountryGraphQL.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:515)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:216)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:712)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_02()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_02" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_02 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_03()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_03" duration-ms="2" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_03 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_04()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_04" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_04 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_05()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_05" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_05 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_06()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_06" duration-ms="2" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_06 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_07()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_07" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_07 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_08()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_08" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_08 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_09()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_09" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_09 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_10()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_10" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_10 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_11()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_11" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_11 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="TC_12()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_12" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_12 -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="TC_13()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_13" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_13 -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="TC_14()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_14" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_14 -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="TC_15()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_15" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_15 -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="TC_16()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_16" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_16 -->
        <test-method status="SKIP" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="startRepo" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="SKIP" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="SKIP" signature="TC_17()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="TC_17" duration-ms="1" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_17 -->
        <test-method status="SKIP" signature="after()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="after" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="SKIP" signature="endReport()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="endReport" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="SKIP" signature="zipFolder()[pri:0, instance:scenarios.GEO.v1.CountryGraphQL@11aa95a]" name="zipFolder" is-config="true" duration-ms="0" started-at="2020-07-15T11:25:36Z" finished-at="2020-07-15T11:25:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zipFolder -->
      </class> <!-- scenarios.GEO.v1.CountryGraphQL -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>

<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="8" total="15" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="47442" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:04:02Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="47442" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:04:02Z">
      <class name="scenarios.GEO.CountryGraphQL">
        <test-method status="PASS" signature="cleanFolder()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="cleanFolder" is-config="true" duration-ms="15" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:03:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanFolder -->
        <test-method status="PASS" signature="getToken()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getToken" is-config="true" duration-ms="78" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:03:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getToken -->
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="beforeSuite" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:03:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="startReport()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startReport" is-config="true" duration-ms="203" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:03:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="before()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="before" is-config="true" duration-ms="812" started-at="2020-01-24T14:03:15Z" finished-at="2020-01-24T14:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="2496" started-at="2020-01-24T14:03:16Z" finished-at="2020-01-24T14:03:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_01()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:16Z" finished-at="2020-01-24T14:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="FAIL" signature="TC_01()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_01" duration-ms="3245" started-at="2020-01-24T14:03:18Z" finished-at="2020-01-24T14:03:21Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.countryWithGeoplId(CountryGraphQL.java:1254)
	at scenarios.GEO.CountryGraphQL.TC_01(CountryGraphQL.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_01 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="171" started-at="2020-01-24T14:03:21Z" finished-at="2020-01-24T14:03:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:22Z" finished-at="2020-01-24T14:03:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1342" started-at="2020-01-24T14:03:22Z" finished-at="2020-01-24T14:03:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_02()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_02()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_02" duration-ms="797" started-at="2020-01-24T14:03:23Z" finished-at="2020-01-24T14:03:24Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.countryNoParameters(CountryGraphQL.java:3038)
	at scenarios.GEO.CountryGraphQL.TC_02(CountryGraphQL.java:149)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_02 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="165" started-at="2020-01-24T14:03:24Z" finished-at="2020-01-24T14:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:24Z" finished-at="2020-01-24T14:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1334" started-at="2020-01-24T14:03:24Z" finished-at="2020-01-24T14:03:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_03()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_03()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_03" duration-ms="1192" started-at="2020-01-24T14:03:25Z" finished-at="2020-01-24T14:03:26Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.countryWithGeoplId(CountryGraphQL.java:1254)
	at scenarios.GEO.CountryGraphQL.TC_03(CountryGraphQL.java:167)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_03 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="165" started-at="2020-01-24T14:03:26Z" finished-at="2020-01-24T14:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:27Z" finished-at="2020-01-24T14:03:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1387" started-at="2020-01-24T14:03:27Z" finished-at="2020-01-24T14:03:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_04()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="TC_04()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_04" duration-ms="2647" started-at="2020-01-24T14:03:28Z" finished-at="2020-01-24T14:03:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_04 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="172" started-at="2020-01-24T14:03:31Z" finished-at="2020-01-24T14:03:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:31Z" finished-at="2020-01-24T14:03:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1279" started-at="2020-01-24T14:03:31Z" finished-at="2020-01-24T14:03:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_05()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="TC_05()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_05" duration-ms="2323" started-at="2020-01-24T14:03:32Z" finished-at="2020-01-24T14:03:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_05 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="184" started-at="2020-01-24T14:03:34Z" finished-at="2020-01-24T14:03:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="1" started-at="2020-01-24T14:03:35Z" finished-at="2020-01-24T14:03:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1385" started-at="2020-01-24T14:03:35Z" finished-at="2020-01-24T14:03:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_06()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_06()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_06" duration-ms="759" started-at="2020-01-24T14:03:36Z" finished-at="2020-01-24T14:03:37Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.countryWithGeopldHolidaysLocales(CountryGraphQL.java:2298)
	at scenarios.GEO.CountryGraphQL.TC_06(CountryGraphQL.java:221)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_06 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="218" started-at="2020-01-24T14:03:37Z" finished-at="2020-01-24T14:03:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1259" started-at="2020-01-24T14:03:37Z" finished-at="2020-01-24T14:03:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_07()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:37Z" finished-at="2020-01-24T14:03:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="TC_07()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_07" duration-ms="2436" started-at="2020-01-24T14:03:38Z" finished-at="2020-01-24T14:03:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_07 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="235" started-at="2020-01-24T14:03:41Z" finished-at="2020-01-24T14:03:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1258" started-at="2020-01-24T14:03:41Z" finished-at="2020-01-24T14:03:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_08()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:41Z" finished-at="2020-01-24T14:03:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="TC_08()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_08" duration-ms="2199" started-at="2020-01-24T14:03:42Z" finished-at="2020-01-24T14:03:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_08 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="213" started-at="2020-01-24T14:03:44Z" finished-at="2020-01-24T14:03:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:45Z" finished-at="2020-01-24T14:03:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1206" started-at="2020-01-24T14:03:45Z" finished-at="2020-01-24T14:03:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_09()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="TC_09()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_09" duration-ms="1609" started-at="2020-01-24T14:03:46Z" finished-at="2020-01-24T14:03:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_09 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="218" started-at="2020-01-24T14:03:47Z" finished-at="2020-01-24T14:03:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:48Z" finished-at="2020-01-24T14:03:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1326" started-at="2020-01-24T14:03:48Z" finished-at="2020-01-24T14:03:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_10()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_10()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_10" duration-ms="778" started-at="2020-01-24T14:03:49Z" finished-at="2020-01-24T14:03:50Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.TC_10(CountryGraphQL.java:373)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_10 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="204" started-at="2020-01-24T14:03:50Z" finished-at="2020-01-24T14:03:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="16" started-at="2020-01-24T14:03:50Z" finished-at="2020-01-24T14:03:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1295" started-at="2020-01-24T14:03:50Z" finished-at="2020-01-24T14:03:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_11()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_11()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_11" duration-ms="786" started-at="2020-01-24T14:03:51Z" finished-at="2020-01-24T14:03:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.TC_11(CountryGraphQL.java:476)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_11 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="218" started-at="2020-01-24T14:03:52Z" finished-at="2020-01-24T14:03:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1233" started-at="2020-01-24T14:03:52Z" finished-at="2020-01-24T14:03:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_12()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:52Z" finished-at="2020-01-24T14:03:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="FAIL" signature="TC_12()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_12" duration-ms="768" started-at="2020-01-24T14:03:54Z" finished-at="2020-01-24T14:03:54Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.TC_12(CountryGraphQL.java:570)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_12 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="209" started-at="2020-01-24T14:03:54Z" finished-at="2020-01-24T14:03:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="1" started-at="2020-01-24T14:03:54Z" finished-at="2020-01-24T14:03:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1281" started-at="2020-01-24T14:03:54Z" finished-at="2020-01-24T14:03:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_13()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="FAIL" signature="TC_13()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_13" duration-ms="927" started-at="2020-01-24T14:03:56Z" finished-at="2020-01-24T14:03:57Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Test Failed]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Test Failed
	at org.testng.Assert.fail(Assert.java:94)
	at scenarios.GEO.CountryGraphQL.TC_13(CountryGraphQL.java:678)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:823)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:778)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1225)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1150)
	at org.testng.TestNG.runSuites(TestNG.java:1075)
	at org.testng.TestNG.run(TestNG.java:1047)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_13 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="234" started-at="2020-01-24T14:03:57Z" finished-at="2020-01-24T14:03:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1301" started-at="2020-01-24T14:03:57Z" finished-at="2020-01-24T14:03:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_14()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:57Z" finished-at="2020-01-24T14:03:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="TC_14()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_14" duration-ms="773" started-at="2020-01-24T14:03:58Z" finished-at="2020-01-24T14:03:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_14 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="218" started-at="2020-01-24T14:03:59Z" finished-at="2020-01-24T14:03:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="getCurrentDate()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="getCurrentDate" is-config="true" duration-ms="0" started-at="2020-01-24T14:03:59Z" finished-at="2020-01-24T14:03:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentDate -->
        <test-method status="PASS" signature="startRepo(java.lang.reflect.Method)[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="startRepo" is-config="true" duration-ms="1201" started-at="2020-01-24T14:03:59Z" finished-at="2020-01-24T14:04:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void scenarios.GEO.CountryGraphQL.TC_15()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRepo -->
        <test-method status="PASS" signature="TC_15()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="TC_15" duration-ms="796" started-at="2020-01-24T14:04:00Z" finished-at="2020-01-24T14:04:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_15 -->
        <test-method status="PASS" signature="after()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="after" is-config="true" duration-ms="218" started-at="2020-01-24T14:04:01Z" finished-at="2020-01-24T14:04:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="endReport" is-config="true" duration-ms="531" started-at="2020-01-24T14:04:01Z" finished-at="2020-01-24T14:04:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="zipFolder()[pri:0, instance:scenarios.GEO.CountryGraphQL@199d22e]" name="zipFolder" is-config="true" duration-ms="63" started-at="2020-01-24T14:04:02Z" finished-at="2020-01-24T14:04:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zipFolder -->
      </class> <!-- scenarios.GEO.CountryGraphQL -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>

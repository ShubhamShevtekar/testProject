package scenarios.GEO;

import java.io.IOException;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;

import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import utils.DbConnect;
import utils.ExcelUtil;
import utils.Miscellaneous;
import utils.Queries;
import utils.Reporting;
import utils.ResponseMessages;
import utils.RetrieveEndPoints;
import utils.TestResultValidation;
import utils.ValidationFields;
import wsMethods.GetResponse;
import wsMethods.PostMethod;

public class CountryPut extends Reporting{
	
	String scenarioName = getClass().getSimpleName();
	String TestCaseDescription, scenarioType, userId,	
	countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	translationGeopoliticalsExpirationDate,geopoliticalTypeName;

	Queries query = new Queries();
	String fileName = this.getClass().getSimpleName();
	ExcelUtil ex = new ExcelUtil();
	String runFlag = null;
	String writableInputFields, writableDB_Fields=null;
	ResponseMessages resMsgs = new ResponseMessages();
	static Logger logger = Logger.getLogger(CountryPut.class);
	@BeforeClass
	public void before(){
		DOMConfigurator.configure("log4j.xml");
		//***create test result excel file
		ex.createResultExcel(fileName);
	}
	
	@BeforeMethod
	protected void startRepo(Method m) throws IOException
	{
		
		runFlag = getExecutionFlag(m.getName(), fileName);
		if(runFlag.equalsIgnoreCase("Yes")) {
			String testCaseName = m.getName();
			test = extent.createTest(testCaseName);
		}
	}
	
	@Test
	public void TC_01()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
			String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
	        	test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
			
				//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_02()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	        
	        	//***error message validation
				
	        	if(errorMsg1.get(0).equals("countryCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when sending the blank CountryCd");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when sending the blank CountryCd");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "CountryCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "CountryCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_03()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	        
	        	//***error message validation
				if(errorMsg1.get(0).equals("countryNumberCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the countryNumberCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response  when the countryNumberCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "countryNumberCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "countryNumberCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_04()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	        	
	        	//***error message validation
				if(errorMsg1.get(0).equals("threeCharCountryCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the threeCharCountryCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response  when the threeCharCountryCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "threeCharCountryCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "threeCharCountryCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_05()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_06()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
			String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_07()
		{	
			//***get test case ID with method name
			String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
			List<String> getResultDBFinal = new ArrayList<String>();
			logger.info("Executing Test Case: "+testCaseID);
			if(!runFlag.equalsIgnoreCase("Yes")) {
				logger.info("Skipped Test Case No. "+testCaseID);
				logger.info("------------------------------------------------------------------");
				throw new SkipException("Execution skipped as per test flag set");
			}
			boolean testResult=false;
			try {
				//***get the test data from sheet
				testDataFields(scenarioName, testCaseID);
				test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
				//***send the data to create request and get request
				String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
						countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
						translationGeopoliticalsExpirationDate,geopoliticalTypeName);
				
				String reqFormatted = Miscellaneous.jsonFormat(payload);
				test.info("Input Request created:");
				test.info(reqFormatted.replaceAll("\n", "<br />"));
				//***get end point url
				String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
				//***send request and get response
				Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
				String responsestr=res.asString(); 
				String responsestr1 = Miscellaneous.jsonFormat(responsestr);
				test.info("Response Recieved:");
				test.info(responsestr1.replaceAll("\n", "<br />"));
				JsonPath js = new JsonPath(responsestr);
				String geoplId= js.get("data.geoplId").toString();
				String Wsstatus= js.getString("meta.message.status");
		        String internalMsg = js.getString("meta.message.internalMessage");
		        String meta = js.getString("meta");
		        String timestamp = js.getString("meta.timestamp");
		        int Wscode= res.statusCode();
		        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
		        {
		        	logger.info("Response status validation passed: "+Wscode);
					test.pass("Response status validation passed: "+Wscode);
					test.pass("Response meta validation passed");
					test.pass("Response timestamp validation passed");
		        	//***get the DB query
		        	
		        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
		        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
		        	
		        	//Query1
		        	String formatCountryEffectiveDate = countryEffectiveDate; 
		        	String formatCountryExpirationDate = countryExpirationDate;
		        	
		    		Date dateCountryEffectiveDate = null;
		    		Date dateCountryExpirationDate = null;
			            
			   		try {
			   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
			   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
			   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
			   		
			   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
			   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
			   		
		    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields = ValidationFields.cntryDbFields();
		    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name		    		
		    		//***get the result from DB
		    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
		    		getResultDBFinal.addAll(getResultDB1);
		    		
		    		
		    		//Query 2
		    		
		    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
		    		Date dateCountryDialingsEffectiveDate = null;
			            
			   		try {
			   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
			   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
			   		
		    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB2);
		    		
		    		
		    		
		    		
		    		//Query 3--
		    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
		    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
			            Date dateCurrenciesEffectiveDate = null;
			            Date dateCurrenciesExpirationDate = null;
			   		try {
			   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
			   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}
			             
			           
			            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
			            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
			            
			            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
			            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
		            
		    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB3);
		    		
		    		
		    		//Query 4--
		    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
		    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
			            
			   		try {
			   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
		            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
		            
		    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB4);
		    		
		    		
		    		//Query 5--
		    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
		    		Date dateGeopoliticalHolidaysEffectiveDate = null;
			            
			   		try {
			   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
			   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
		            
		    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB5);
		    		
		    		
		    		//Query 6--
		    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
		    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
			            
			   		try {
			   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
			   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
		            
		    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB6);
		    		
		    		//Query 7--
		    		String formatLocalesEffectiveDate = localesEffectiveDate;   
		    		Date dateLocalesEffectiveDate = null;
			            
			   		try {
			   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
			   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
		            
		    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB7);
		    		
		    		//Query 8--
		    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
		    		Date dateTranslationGeopoliticalsEffectiveDate = null;
			            
			   		try {
			   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
			   		} catch (ParseException e) {
			   			// TODO Auto-generated catch block
			   			e.printStackTrace();
			   		}

			   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
			   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
		            
		    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB8);
		    		
		    		//Query 9--
		    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
		    		//***get the fields needs to be validate in DB
		    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
		    		//***get the result from DB
		    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
		    		//***send the input, response, DB result for validation
		    		getResultDBFinal.addAll(getResultDB9);
		    		
		    		
		    		//---
		    		if(js.getString("data.geoplId")!=null)
		    		{
		    			String geoplId1 = js.getString("data.geoplId");
		    			//***success message validation
		    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
		    			if(internalMsg.equals(expectMessage))
		    			{
		    				logger.info("Success response is getting received with Country Code: "+countryCd);
		    				test.pass("Success response is getting received with Country Code: "+countryCd);
		    				//***send the input, response, DB result for validation
		    			
		    	    		
		    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
		    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
		    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
		    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
		    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
		    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
		    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
		    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
		    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
		    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
		    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
		    				
		    	    	
		            		//***get response fields values
		            		List<String> resFields = ValidationFields.langResponseFileds(res);
		            		logger.info("Country Table Validation Starts:");
	            			test.info("Country Table Validation Starts:");
	            			
		            		
		            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
		            		//***write result to excel
		            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
		            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
		            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
	    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
	    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
	    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
	    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
	    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
	    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
	    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
	    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
		            		
		            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
		            		
		            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
		            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
		            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
	    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
	    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
	    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
	    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
	    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
	    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
	    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
	    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
		            		
		            		
		            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
		            		test.info("Input Data Values:");
		            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
		            		test.info("DB Data Values:");
		            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
		            		if(testResult)
		            		{
		            			logger.info("Comparison between input data & DB data matching and passed");
		            			logger.info("------------------------------------------------------------------");
		            			test.pass("Comparison between input data & DB data matching and passed");
		            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
		            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
		            		}else{
		            			logger.error("Comparison between input data & DB data not matching and failed");
		            			logger.error("------------------------------------------------------------------");
		            			test.fail("Comparison between input data & DB data not matching and failed");
		            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
		            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
		            			Assert.fail("Test Failed");
		            		}
		    			}else {
		    				logger.error("Success message is not getting received as expected in response");
		    				test.fail("Success message is not getting received as expected in response");
		    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
		        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
		        					"Success message is not getting received as expected in response" );
		        			Assert.fail("Test Failed");
		    			}
		    		}else {
		    			logger.error("geoplId  is not available in response");
		    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
		    			logger.error("------------------------------------------------------------------");
		    			test.fail("geoplId is not available in response");
		    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
		    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
		    			Assert.fail("Test Failed");
					}
		        }else {
		        	if(Wscode !=200){
		        		logger.error("Response status validation failed: "+Wscode);
						logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
						logger.error("------------------------------------------------------------------");
			        	test.fail("Response status validation failed: "+Wscode);
		        	}else if(meta == null){
		        		logger.error("Response validation failed as meta not present");
						logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
						logger.error("------------------------------------------------------------------");
			        	test.fail("Response validation failed as meta not present");
		        	}else if(timestamp == null){
		        		logger.error("Response validation failed as timestamp not present");
						logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
						logger.error("------------------------------------------------------------------");
			        	test.fail("Response validation failed as timestamp not present");
		        	}
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
							responsestr1, "Fail", internalMsg );
		        	Assert.fail("Test Failed");
		        }
			}catch (Exception e) {
				e.printStackTrace();
				logger.error("Exception thrown when executing the test case: "+e);
				logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
				logger.error("------------------------------------------------------------------");
				test.fail("Exception thrown when executing the test case: "+e);
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
						"", "Fail", ""+e );
	        	Assert.fail("Test Failed");
			}
		}
		
	@Test
	public void TC_08()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
		
		@Test
	public void TC_09()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_10()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_11()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_12()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_13()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
		
	@Test
	public void TC_14()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Country-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Country-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test	
	public void TC_15()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_16()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	       
	        	//***error message validation
				if(errorMsg1.get(0).equals("intialDialingPrefixCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the intialDialingPrefixCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response  when the intialDialingPrefixCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "intialDialingPrefixCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "intialDialingPrefixCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_17()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	        	
	        	//***error message validation
				if(errorMsg1.get(0).equals("intialDialingCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the intialDialingCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response  when the intialDialingCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "intialDialingCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "intialDialingCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_18()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();

	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_19()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_20()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_21()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        int Wscode= res.statusCode();
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
				test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	

	@Test
	public void TC_22()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
	        	test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***error message validation
	        	if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the countryDialing-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the countryDialing-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}

	@Test
	public void TC_23()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
			if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
	        	test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate ="9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}if(countryDialingsExpirationDate.isEmpty()){
	    			countryDialingsExpirationDate = "9999-12-31";
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
		
	@Test
	public void TC_24()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("currencyNumberCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the currencyNumberCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response  when the currencyNumberCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "currencyNumberCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "currencyNumberCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_25()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("currencyCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response  when the currencyCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the currencyCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "currencyCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "currencyCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_26()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status code 400 validation passed: "+Wscode);
				test.pass("Response meta validation passed");
				test.pass("Response timestamp validation passed");
	        	
	        	//***error message validation
				if(errorMsg1.get(0).equals("minorUnitCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the minorUnitCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the minorUnitCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "minorUnitCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "minorUnitCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_27()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	logger.error("Response status validation failed: "+Wscode);
				logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
				logger.error("------------------------------------------------------------------");
	        	test.fail("Response status validation failed: "+Wscode);
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_28()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
	        	test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Currency-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Currency-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_29()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate ="9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	//@Test
	
	
	@Test
	public void TC_30()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("uomTypeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the uomTypeCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the uomTypeCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "uomTypeCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "uomTypeCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_31()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the UOM-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the UOM-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage  );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test	
	public void TC_32()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate ="9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		if(geopoliticalUnitOfMeasuresExpirationDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}if(geopoliticalHolidaysExpirationDate.isEmpty()){
	    			geopoliticalHolidaysExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_33()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("holidayName") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the holidayName is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the holidayName is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "holidayName"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "holidayName"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_34()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredField;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Holiday-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Holiday-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test	
	public void TC_35()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		if(geopoliticalHolidaysExpirationDate.isEmpty()){
	    			geopoliticalHolidaysExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_36()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("affilTypeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the affilTypeCd  is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the affilTypeCd  is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "affilTypeCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "affilTypeCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_37()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Affiliations-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Affiliations-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test	
	public void TC_38()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}if(geopoliticalAffiliationsExpirationDate.isEmpty()){
	    			geopoliticalAffiliationsExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_39()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("languageCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the locale - languageCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the locale - languageCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "languageCd"+expectMessage  );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "languageCd"+expectMessage  );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_40()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("localeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the localeCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the localeCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", localeCd );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", localeCd );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_41()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_42()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_43()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	@Test
	public void TC_44()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_45()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_46()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_47()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
	        	test.pass("Response meta validation passed");
	        	test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Locale-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Locale-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test	
	public void TC_48()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		if(localesExpirationDate.isEmpty()){
	    			localesExpirationDate = "9999-12-31";
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	@Test
	public void TC_49()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("languageCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Translation Geopolitical - languageCd is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Translation Geopolitical - languageCd is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "languageCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "languageCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	@Test
	public void TC_50()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_51()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_52()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_53()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the translationGeopoliticals-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the translationGeopoliticals-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test	
	public void TC_54()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		if(translationGeopoliticalsExpirationDate.isEmpty()){
	    			translationGeopoliticalsExpirationDate = "9999-12-31";
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_55()

	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.geopoliticalTypeNameBlanckMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 404 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 404 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("Error") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when thegeopoliticalTypeName is passed as empty/ null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when thegeopoliticalTypeName is passed as empty/ null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "geopoliticalTypeName"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=404){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "geopoliticalTypeName"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_56()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutcountryNumberCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("countryNumberCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when sending the blank countryNumberCd");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when sending the blank countryNumberCd");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "countryNumberCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "countryNumberCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_57()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutCntryCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("countryCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the countryCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the countryCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "countryCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "countryCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_58()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutThreeCharCntryCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("threeCharCountryCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the threeCharCountryCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the threeCharCountryCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "threeCharCountryCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "threeCharCountryCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_59()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutIndependentFlag(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_60()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutPostalFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_61()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutPostalFlag(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	logger.error("Response status validation failed: "+Wscode);
				logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
				logger.error("------------------------------------------------------------------");
	        	test.fail("Response status validation failed: "+Wscode);
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_62()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutPostalLengthNumber(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_63()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutFirstWorkWeekDayName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_64()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutWeekendFirstDayName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_65()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutInternetDomainName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_66()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutDependentRelationshipId(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_67()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutDependentCountryCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_68()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutEffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Country-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Country-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_69()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutExpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}

	
	
	@Test
	public void TC_70()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutInitialDialingPrefixCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("intialDialingPrefixCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the intialDialingPrefixCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the intialDialingPrefixCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "intialDialingPrefixCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail",  "intialDialingPrefixCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_71()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutIntialDialingCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("intialDialingCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the intialDialingCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the intialDialingCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "intialDialingCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "intialDialingCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_72()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutLandPhMaxLthNbr(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_73()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutlandPhMinLthNbr(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_74()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutmoblPhMaxLthNbr(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_75()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutmoblPhMinLthNbr(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_76()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutCDEffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the countryDialing-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the countryDialing-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_77()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestCDExpirationDt(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		if(countryDialingsExpirationDate.isEmpty()){
	    			countryDialingsExpirationDate = "9999-12-31";
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}

	
	@Test
	public void TC_78()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutCurrencyNumberCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("currencyNumberCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the currencyNumberCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the currencyNumberCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "currencyNumberCd"+ expectMessage);
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "currencyNumberCd"+ expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_79()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutCurrencyCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("currencyCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the currencyCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the currencyCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "currencyCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "currencyCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	//cntryPostRequestWithoutminorUnitCd
	
	
	@Test
	public void TC_80()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutminorUnitCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("minorUnitCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the minorUnitCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the minorUnitCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "minorUnitCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail",  "minorUnitCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_81()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutMoneyFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_82()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestCurEffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Currency-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Currency-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+ expectMessage);
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+ expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_83()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestCurExpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}

	
	@Test
	public void TC_84()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutUomTypeCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("uomTypeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the uomTypeCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the uomTypeCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "uomTypeCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail",  "uomTypeCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_85()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestUomEffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the UOM-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the UOM-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}	
	
	@Test
	public void TC_86()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestUomExpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		if(geopoliticalUnitOfMeasuresExpirationDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_87()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutholidayName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("holidayName") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the holidayName attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the holidayName attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "holidayName"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "holidayName"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	@Test
	public void TC_88()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestHolidayeffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Holiday-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Holiday-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_89()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestHolidayexpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		if(geopoliticalHolidaysExpirationDate.isEmpty()){
	        		geopoliticalHolidaysExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_90()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutAffilTypeCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("affilTypeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the affilTypeCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the affilTypeCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "affilTypeCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "affilTypeCd"+expectMessage  );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_91()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutAffileffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Affiliations-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Affiliations-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_92()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutAffilexpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			currenciesExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		if(geopoliticalAffiliationsExpirationDate.isEmpty()){
	    			geopoliticalAffiliationsExpirationDate = "9999-12-31";
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_93()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutLocaleLanguageCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("languageCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the locale - languageCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the locale - languageCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "languageCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "languageCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_94()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutLocaleCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("localeCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the localeCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the localeCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "localeCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "localeCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_95()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutcldrVersionNumber(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_96()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutcldrVersionDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_97()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutdateFullFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_98()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutdateLongFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_99()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutdateMediumFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_100()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutdateShortFormatDescription(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_101()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutLocaleEffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Locale-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Locale-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_102()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestLocaleExpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		if(localesExpirationDate.isEmpty()){
	    			localesExpirationDate = "9999-12-31";
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_103()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithouttranslationGeopoliticalsLangCd(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("languageCd") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Translation Geopolitical - languageCd attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Translation Geopolitical - languageCd attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "languageCd"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "languageCd"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_104()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutTranslationName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_105()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutTGversionNumber(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_106()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutTGversionDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
		            
		   		try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		
	    		
	    		
	    		//Query 3--
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		             
		           
		            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
		            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
		            
		            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
		            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
            			
	            		
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	
	@Test
	public void TC_107()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutTGeffectiveDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
				if(errorMsg1.get(0).equals("effectiveDate") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the translationGeopoliticals-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the translationGeopoliticals-effectiveDate (considering as current date) is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "effectiveDate"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "effectiveDate"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_108()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();	
		List<String> getResultDBFinal = new ArrayList<String>();
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		boolean testResult=false;
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestTGexpirationDate(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String geoplId= js.get("data.geoplId").toString();
			String Wsstatus= js.getString("meta.message.status");
	        String internalMsg = js.getString("meta.message.internalMessage");
	        int Wscode= res.statusCode();
	        String meta = js.getString("meta");
			String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 200 && Wsstatus.equalsIgnoreCase("SUCCESS") && meta!=null && timestamp!=null)
	        {
	        	logger.info("Response status validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***get the DB query
	        	Date date = new Date();
	        	String todaysDate= new SimpleDateFormat("yyyy-MM-dd").format(date);
	        	
	        	DateFormat srcDf = new SimpleDateFormat("yyyy-MM-dd");
	        	DateFormat destDf = new SimpleDateFormat("dd-MMM-yyyy");
	        	
	        	//Query1
	        	if(countryEffectiveDate.isEmpty()){
	        		countryEffectiveDate = todaysDate;
	        	}
	        	if(countryExpirationDate.isEmpty()){
	        		countryExpirationDate = "9999-12-31";
	        	}	
	        	
	        	String formatCountryEffectiveDate = countryEffectiveDate; 
	        	String formatCountryExpirationDate = countryExpirationDate;
	        	
	    		Date dateCountryEffectiveDate = null;
	    		Date dateCountryExpirationDate = null;
	    		
    			try {
		   			dateCountryEffectiveDate = srcDf.parse(formatCountryEffectiveDate);
		   			dateCountryExpirationDate = srcDf.parse(formatCountryExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryEffectiveDate = destDf.format(dateCountryEffectiveDate);            
		   		formatCountryEffectiveDate = formatCountryEffectiveDate.toUpperCase();
		   		
		   		formatCountryExpirationDate = destDf.format(dateCountryExpirationDate);            
		   		formatCountryExpirationDate = formatCountryExpirationDate.toUpperCase();
		   		
	    		String cntryPostPostQuery1 = query.cntryPostQuery(countryCd,geoplId,formatCountryEffectiveDate,formatCountryExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields = ValidationFields.cntryDbFields();
	    		fields.remove(0);//***removing user name field since we are going to validate only last updated user name
	    		//***get the result from DB
	    		List<String> getResultDB1 = DbConnect.getResultSetFor(cntryPostPostQuery1, fields, fileName, testCaseID);
	    		getResultDBFinal.addAll(getResultDB1);
	    		
	    		
	    		//Query 2
	    		if(countryDialingsEffectiveDate.isEmpty()){
	    			countryDialingsEffectiveDate = todaysDate;
	        	}
	    		String formatCountryDialingsEffectiveDate = countryDialingsEffectiveDate;   
	    		Date dateCountryDialingsEffectiveDate = null;
		            
		   		try {
		   			dateCountryDialingsEffectiveDate = srcDf.parse(formatCountryDialingsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatCountryDialingsEffectiveDate = destDf.format(dateCountryDialingsEffectiveDate);            
		   		formatCountryDialingsEffectiveDate = formatCountryDialingsEffectiveDate.toUpperCase();
		   		
	    		String cntryPostPostQuery2 = query.cntryCountryDialingsPostQuery(geoplId,intialDialingCd,intialDialingPrefixCd,formatCountryDialingsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields2 = ValidationFields.cntryCountryDialingsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB2 = DbConnect.getResultSetFor(cntryPostPostQuery2, fields2, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB2);
	    		
	    		//Query 3--	    		
	    		if(currenciesEffectiveDate.isEmpty()){
	    			currenciesEffectiveDate = todaysDate;
	        	}
	    		if(currenciesExpirationDate.isEmpty()){
	    			countryExpirationDate = "9999-12-31";
	        	}
	    		String formatCurrenciesEffectiveDate = currenciesEffectiveDate;
	    		String formatCurrenciesExpirationDate = currenciesExpirationDate;
		            Date dateCurrenciesEffectiveDate = null;
		            Date dateCurrenciesExpirationDate = null;
		   		try {
		   			dateCurrenciesEffectiveDate = srcDf.parse(formatCurrenciesEffectiveDate);
		   			dateCurrenciesExpirationDate = srcDf.parse(formatCurrenciesExpirationDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}
		           
	            formatCurrenciesEffectiveDate = destDf.format(dateCurrenciesEffectiveDate);
	            formatCurrenciesExpirationDate = destDf.format(dateCurrenciesExpirationDate);
	            
	            formatCurrenciesEffectiveDate = formatCurrenciesEffectiveDate.toUpperCase();
	            formatCurrenciesExpirationDate = formatCurrenciesExpirationDate.toUpperCase();
	            
	    		String countryPostQuery3 = query.cntryCurrenciesPostQuery(geoplId,currencyCd,minorUnitCd,formatCurrenciesEffectiveDate,formatCurrenciesExpirationDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields3 = ValidationFields.cntryCurrenciesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB3 = DbConnect.getResultSetFor(countryPostQuery3, fields3, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB3);
	    		
	    		
	    		//Query 4--
	    		if(geopoliticalUnitOfMeasuresEffectiveDate.isEmpty()){
	    			geopoliticalUnitOfMeasuresEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalUnitOfMeasuresEffectiveDate = geopoliticalUnitOfMeasuresEffectiveDate;   
	    		Date dateGeopoliticalUnitOfMeasuresEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalUnitOfMeasuresEffectiveDate = srcDf.parse(formatGeopoliticalUnitOfMeasuresEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalUnitOfMeasuresEffectiveDate = destDf.format(dateGeopoliticalUnitOfMeasuresEffectiveDate);            
	            formatGeopoliticalUnitOfMeasuresEffectiveDate = formatGeopoliticalUnitOfMeasuresEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery4 = query.cntryGeopoliticalUOMPostQuery(geoplId,formatGeopoliticalUnitOfMeasuresEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields4 = ValidationFields.cntryGeopoliticalUOMDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB4 = DbConnect.getResultSetFor(countryPostQuery4, fields4, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB4);
	    		
	    		
	    		//Query 5--
	    		if(geopoliticalHolidaysEffectiveDate.isEmpty()){
	    			geopoliticalHolidaysEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalHolidaysEffectiveDate = geopoliticalHolidaysEffectiveDate;   
	    		Date dateGeopoliticalHolidaysEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalHolidaysEffectiveDate = srcDf.parse(formatGeopoliticalHolidaysEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalHolidaysEffectiveDate = destDf.format(dateGeopoliticalHolidaysEffectiveDate);            
		   		formatGeopoliticalHolidaysEffectiveDate = formatGeopoliticalHolidaysEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery5 = query.cntryGeopoliticalHolidaysPostQuery(geoplId,formatGeopoliticalHolidaysEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields5 = ValidationFields.cntryGeopoliticalHolidaysDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB5 = DbConnect.getResultSetFor(countryPostQuery5, fields5, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB5);
	    		
	    		
	    		//Query 6--
	    		if(geopoliticalAffiliationsEffectiveDate.isEmpty()){
	    			geopoliticalAffiliationsEffectiveDate = todaysDate;
	        	}
	    		String formatGeopoliticalAffiliationsEffectiveDate = geopoliticalAffiliationsEffectiveDate;   
	    		Date dateGeopoliticalAffiliationsEffectiveDate = null;
		            
		   		try {
		   			dateGeopoliticalAffiliationsEffectiveDate = srcDf.parse(formatGeopoliticalAffiliationsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatGeopoliticalAffiliationsEffectiveDate = destDf.format(dateGeopoliticalAffiliationsEffectiveDate);            
		   		formatGeopoliticalAffiliationsEffectiveDate = formatGeopoliticalAffiliationsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery6 = query.cuntryGeopoliticalAffiliationsPostQuery(geoplId,formatGeopoliticalAffiliationsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields6 = ValidationFields.cntryGeopoliticalAffiliationsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB6 = DbConnect.getResultSetFor(countryPostQuery6, fields6, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB6);
	    		
	    		//Query 7--
	    		
	    		if(localesEffectiveDate.isEmpty()){
	    			localesEffectiveDate = todaysDate;
	        	}
	    		String formatLocalesEffectiveDate = localesEffectiveDate;   
	    		Date dateLocalesEffectiveDate = null;
		            
		   		try {
		   			dateLocalesEffectiveDate = srcDf.parse(formatLocalesEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatLocalesEffectiveDate = destDf.format(dateLocalesEffectiveDate);            
		   		formatLocalesEffectiveDate = formatLocalesEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery7 = query.cntryLocalesPostQuery(geoplId,localeCd,formatLocalesEffectiveDate,localesScriptCd);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields7 = ValidationFields.cntryLocalesDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB7 = DbConnect.getResultSetFor(countryPostQuery7, fields7, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB7);
	    		
	    		//Query 8--
	    		if(translationGeopoliticalsEffectiveDate.isEmpty()){
	    			translationGeopoliticalsEffectiveDate = todaysDate;
	        	}
	    		if(translationGeopoliticalsExpirationDate.isEmpty()){
	    			translationGeopoliticalsExpirationDate = "9999-12-31";
	        	}
	    		String formatTranslationGeopoliticalsEffectiveDate = translationGeopoliticalsEffectiveDate;   
	    		Date dateTranslationGeopoliticalsEffectiveDate = null;
		            
		   		try {
		   			dateTranslationGeopoliticalsEffectiveDate = srcDf.parse(formatTranslationGeopoliticalsEffectiveDate);
		   		} catch (ParseException e) {
		   			// TODO Auto-generated catch block
		   			e.printStackTrace();
		   		}

		   		formatTranslationGeopoliticalsEffectiveDate = destDf.format(dateTranslationGeopoliticalsEffectiveDate);            
		   		formatTranslationGeopoliticalsEffectiveDate = formatTranslationGeopoliticalsEffectiveDate.toUpperCase();
	            
	    		String countryPostQuery8 = query.cntryTranslationGeopoliticalsPostQuery(geoplId,translationGeopoliticalsLanguageCd,formatTranslationGeopoliticalsEffectiveDate);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields8 = ValidationFields.cntryTranslationGeopoliticalsDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB8 = DbConnect.getResultSetFor(countryPostQuery8, fields8, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB8);
	    		
	    		//Query 9--
	    		
	    		String countryPostQuery9 = query.countryGeopoliticalTypePostQuery(geoplId);
	    		//***get the fields needs to be validate in DB
	    		List<String> fields9 = ValidationFields.cntryGeopoliticalTypeDbFields();
	    		//***get the result from DB
	    		List<String> getResultDB9 = DbConnect.getResultSetFor(countryPostQuery9, fields9, fileName, testCaseID);
	    		//***send the input, response, DB result for validation
	    		getResultDBFinal.addAll(getResultDB9);
	    		
	    		
	    		//---
	    		if(js.getString("data.geoplId")!=null)
	    		{
	    			String geoplId1 = js.getString("data.geoplId");
	    			//***success message validation
	    			String expectMessage = resMsgs.cntryPutSuccessMsg+geoplId1;
	    			if(internalMsg.equals(expectMessage))
	    			{
	    				logger.info("Success response is getting received with Country Code: "+countryCd);
	    				test.pass("Success response is getting received with Country Code: "+countryCd);
	    				//***send the input, response, DB result for validation
	    			
	    	    		
	    				String[] inputFieldValues = {countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
	    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
	    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
	    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
	    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
	    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
	    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
	    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
	    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
	    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
	    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
	    				
	    	    	
	            		//***get response fields values
	            		List<String> resFields = ValidationFields.langResponseFileds(res);
	            		logger.info("Country Table Validation Starts:");
            			test.info("Country Table Validation Starts:");
	            		testResult = TestResultValidation.testValidationWithDB(res, inputFieldValues, getResultDBFinal, resFields);
	            		//***write result to excel
	            		String[] inputFieldNames = {"Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
	            				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
	            				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
    							"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
    							"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
    							"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
    							"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
    							"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
    							"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
    							"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
    							"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
	            		
	            		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	            		
	            		String[] dbFieldNames = {"Db_countryNumberCd:","Db_countryCd:","Db_threeCharCountryCd:","Db_independentFlag:","Db_postalFormatDescription:","Db_postalFlag:","Db_postalLengthNumber:",
	            				"Db_firstWorkWeekDayName:","Db_lastWorkWeekDayName:","Db_weekendFirstDayName:","Db_internetDomainName:","Db_dependentRelationshipId:","Db_dependentCountryCd:",
	            				"Db_countryEffectiveDate:","Db_countryExpirationDate:","Db_LastUpdateUserName:","Db_intialDialingPrefixCd:","Db_intialDialingCd:","Db_landPhMaxLthNbr:","Db_landPhMinLthNbr:",
    							"Db_moblPhMaxLthNbr:","Db_moblPhMinLthNbr:","Db_countryDialingsEffectiveDate:","Db_countryDialingsExpirationDate:","Db_currencyNumberCd:",
    							"Db_currencyCd:","Db_minorUnitCd:","Db_moneyFormatDescription:","Db_currenciesEffectiveDate:","Db_currenciesExpirationDate:","Db_uomTypeCd:",
    							"Db_geopoliticalUnitOfMeasuresEffectiveDate:","Db_geopoliticalUnitOfMeasuresExpirationDate:","Db_holidayName:",
    							"Db_geopoliticalHolidaysEffectiveDate:","Db_geopoliticalHolidaysExpirationDate:","Db_affilTypeCd:","Db_geopoliticalAffiliationsEffectiveDate:",
    							"Db_geopoliticalAffiliationsExpirationDate:","Db_localesLanguageCd:","Db_localeCd:","Db_localesScriptCd:","Db_cldrVersionNumber:","Db_cldrVersionDate:","Db_dateFullFormatDescription:",
    							"Db_dateLongFormatDescription:","Db_dateMediumFormatDescription:","Db_dateShortFormatDescription:","Db_localesEffectiveDate:",
    							"Db_localesExpirationDate:","Db_translationGeopoliticalsLanguageCd:","Db_translationGeopoliticalsScriptCd:","Db_translationName:","Db_versionNumber:","Db_versionDate:","Db_translationGeopoliticalsEffectiveDate:",
    							"Db_translationGeopoliticalsExpirationDate:","Db_geopoliticalTypeName:"};
	            		
	            		
	            		writableDB_Fields = Miscellaneous.geoDBFieldNames(getResultDBFinal, dbFieldNames);
	            		test.info("Input Data Values:");
	            		test.info(writableInputFields.replaceAll("\n", "<br />"));    		
	            		test.info("DB Data Values:");
	            		test.info(writableDB_Fields.replaceAll("\n", "<br />"));
	            		if(testResult)
	            		{
	            			logger.info("Comparison between input data & DB data matching and passed");
	            			logger.info("------------------------------------------------------------------");
	            			test.pass("Comparison between input data & DB data matching and passed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, writableDB_Fields,
	            					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
	            		}else{
	            			logger.error("Comparison between input data & DB data not matching and failed");
	            			logger.error("------------------------------------------------------------------");
	            			test.fail("Comparison between input data & DB data not matching and failed");
	            			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	            					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", "Comparison between input data & DB data not matching and failed" );
	            			Assert.fail("Test Failed");
	            		}
	    			}else {
	    				logger.error("Success message is not getting received as expected in response");
	    				test.fail("Success message is not getting received as expected in response");
	    				ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	        					writableInputFields, writableDB_Fields, Wsstatus, ""+Wscode, responsestr1, "Fail", 
	        					"Success message is not getting received as expected in response" );
	        			Assert.fail("Test Failed");
	    			}
	    		}else {
	    			logger.error("geoplId  is not available in response");
	    			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
	    			test.fail("geoplId is not available in response");
	    			ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,
	    					"", "", Wsstatus, ""+Wscode, responsestr1, "Fail", "" );
	    			Assert.fail("Test Failed");
				}
	        }else {
	        	if(Wscode !=200){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted, "", "", Wsstatus, ""+Wscode,
						responsestr1, "Fail", internalMsg );
	        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	
	@Test
	public void TC_109()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutGeoTypeNm(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.geoTypeNameBlankMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 404 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 404 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("Error") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the geopoliticalTypeName attribute is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the geopoliticalTypeName attribute is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "geopoliticalTypeName"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "geopoliticalTypeName"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_110()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutMeta(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)

		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("meta") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the Metadata section is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the Metadata section is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail",  "meta"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail",  "meta"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_111()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequest(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("userName") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the username is passed as empty/null in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the username is passed as empty/null in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "userName"+expectMessage  );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "userName"+expectMessage  );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	@Test
	public void TC_112()
	{	
		//***get test case ID with method name
		String testCaseID = new Object(){}.getClass().getEnclosingMethod().getName();		
		logger.info("Executing Test Case: "+testCaseID);
		if(!runFlag.equalsIgnoreCase("Yes")) {
			logger.info("Skipped Test Case No. "+testCaseID);
			logger.info("------------------------------------------------------------------");
			throw new SkipException("Execution skipped as per test flag set");
		}
		try {
			//***get the test data from sheet
			testDataFields(scenarioName, testCaseID);
			test.log(Status.INFO, MarkupHelper.createLabel(TestCaseDescription, ExtentColor.PURPLE));
			//***send the data to create request and get request
			String payload = PostMethod.cntryPostRequestWithoutUserName(userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
					firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
					countryEffectiveDate,countryExpirationDate,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
					moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
					currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
					geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
					geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
					geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
					dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
					localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
					translationGeopoliticalsExpirationDate,geopoliticalTypeName);
			String reqFormatted = Miscellaneous.jsonFormat(payload);
			test.info("Input Request created:");
			test.info(reqFormatted.replaceAll("\n", "<br />"));
			//***get end point url
			String getEndPoinUrl = RetrieveEndPoints.getEndPointUrl("geoPut", fileName, level+".cntry.put");
			//***send request and get response
			Response res = GetResponse.sendRequestPut(payload, tokenValues[0], token, getEndPoinUrl, fileName, testCaseID);
			String responsestr=res.asString(); 
			String responsestr1 = Miscellaneous.jsonFormat(responsestr);
			test.info("Response Recieved:");
			test.info(responsestr1.replaceAll("\n", "<br />"));
			JsonPath js = new JsonPath(responsestr);
			String Wsstatus= res.getStatusLine();
			int errrorMsgLength = js.get("errors.size");
			List<String> errorMsg1 = new ArrayList<String>();
			List<String> errorMsg2 = new ArrayList<String>();
			for(int i=0;i<errrorMsgLength;i++){
				errorMsg1.add(js.getString("errors["+i+"].fieldName"));
				errorMsg2.add(js.getString("errors["+i+"].message"));
			}
	        int Wscode= res.statusCode();
	        String expectMessage = resMsgs.requiredFieldMsg;
	        String meta = js.getString("meta");
	        String timestamp = js.getString("meta.timestamp");
	        if(Wscode == 400 && meta!=null && timestamp!=null)
		    {
	        	logger.info("Response status code 400 validation passed: "+Wscode);
	        	test.pass("Response status validation passed: "+Wscode);
			test.pass("Response meta validation passed");
			test.pass("Response timestamp validation passed");
	        	//***error message validation
			if(errorMsg1.get(0).equals("userName") && errorMsg2.get(0).equals(expectMessage))
				{
				
				String[] inputFieldValues = {userId,countryNumberCd,countryCd,threeCharCountryCd,independentFlag,postalFormatDescription,postalFlag,postalLengthNumber,
    						firstWorkWeekDayName,lastWorkWeekDayName,weekendFirstDayName,internetDomainName,dependentRelationshipId,dependentCountryCd,
    						countryEffectiveDate,countryExpirationDate,userId,intialDialingPrefixCd,intialDialingCd,landPhMaxLthNbr,landPhMinLthNbr,
    						moblPhMaxLthNbr,moblPhMinLthNbr,countryDialingsEffectiveDate,countryDialingsExpirationDate,currencyNumberCd,
    						currencyCd,minorUnitCd,moneyFormatDescription,currenciesEffectiveDate,currenciesExpirationDate,uomTypeCd,
    						geopoliticalUnitOfMeasuresEffectiveDate,geopoliticalUnitOfMeasuresExpirationDate,holidayName,
    						geopoliticalHolidaysEffectiveDate,geopoliticalHolidaysExpirationDate,affilTypeCd,geopoliticalAffiliationsEffectiveDate,
    						geopoliticalAffiliationsExpirationDate,localesLanguageCd,localeCd,localesScriptCd,cldrVersionNumber,cldrVersionDate,dateFullFormatDescription,
    						dateLongFormatDescription,dateMediumFormatDescription,dateShortFormatDescription,localesEffectiveDate,
    						localesExpirationDate,translationGeopoliticalsLanguageCd,translationGeopoliticalsScriptCd,translationName,versionNumber,versionDate,translationGeopoliticalsEffectiveDate,
    						translationGeopoliticalsExpirationDate,geopoliticalTypeName};
					
				String[] inputFieldNames = {"Input_UserName:","Input_countryNumberCd:","Input_countryCd:","Input_threeCharCountryCd:","Input_independentFlag:","Input_postalFormatDescription:","Input_postalFlag:","Input_postalLengthNumber:",
        				"Input_firstWorkWeekDayName:","Input_lastWorkWeekDayName:","Input_weekendFirstDayName:","Input_internetDomainName:","Input_dependentRelationshipId:","Input_dependentCountryCd:",
        				"Input_countryEffectiveDate:","Input_countryExpirationDate:","Input_LastUpdateUserName:","Input_intialDialingPrefixCd:","Input_intialDialingCd:","Input_landPhMaxLthNbr:","Input_landPhMinLthNbr:",
						"Input_moblPhMaxLthNbr:","Input_moblPhMinLthNbr:","Input_countryDialingsEffectiveDate:","Input_countryDialingsExpirationDate:","Input_currencyNumberCd:",
						"Input_currencyCd:","Input_minorUnitCd:","Input_moneyFormatDescription:","Input_currenciesEffectiveDate:","Input_currenciesExpirationDate:","Input_uomTypeCd:",
						"Input_geopoliticalUnitOfMeasuresEffectiveDate:","Input_geopoliticalUnitOfMeasuresExpirationDate:","Input_holidayName:",
						"Input_geopoliticalHolidaysEffectiveDate:","Input_geopoliticalHolidaysExpirationDate:","Input_affilTypeCd:","Input_geopoliticalAffiliationsEffectiveDate:",
						"Input_geopoliticalAffiliationsExpirationDate:","Input_localesLanguageCd:","Input_localeCd:","Input_localesScriptCd:","Input_cldrVersionNumber:","Input_cldrVersionDate:","Input_dateFullFormatDescription:",
						"Input_dateLongFormatDescription:","Input_dateMediumFormatDescription:","Input_dateShortFormatDescription:","Input_localesEffectiveDate:",
						"Input_localesExpirationDate:","Input_translationGeopoliticalsLanguageCd:","Input_translationGeopoliticalsScriptCd:","Input_translationName:","Input_versionNumber:","Input_versionDate:","Input_translationGeopoliticalsEffectiveDate:",
						"Input_translationGeopoliticalsExpirationDate:","Input_geopoliticalTypeName:"};
    	  		  
	        		writableInputFields = Miscellaneous.geoFieldInputNames(inputFieldValues, inputFieldNames);
	        		test.info("Input Data Values:");
            		test.info(writableInputFields.replaceAll("\n", "<br />"));
	        		logger.info("Expected error message is getting received in response when the username is not passed in the JSON request");
	        		logger.info("Execution is completed for Passed Test Case No. "+testCaseID);
	    			logger.info("------------------------------------------------------------------");
	        		test.pass("Expected error message is getting received in response when the username is not passed in the JSON request");
	        		ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,	writableInputFields, "NA",
	    					Wsstatus, ""+Wscode, responsestr1, "Pass", "" );
					test.log(Status.PASS, MarkupHelper.createLabel("test status", ExtentColor.GREEN));
				}else {
					logger.error("Expected error message is not getting received in response");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
	    			logger.error("------------------------------------------------------------------");
					test.fail("Expected error message is not getting received in response");
		        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
							responsestr, "Fail", "userName"+expectMessage );
		        	Assert.fail("Test Failed");
		        }
		    }else {
		    	if(Wscode !=400){
	        		logger.error("Response status validation failed: "+Wscode);
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response status validation failed: "+Wscode);
	        	}else if(meta == null){
	        		logger.error("Response validation failed as meta not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as meta not present");
	        	}else if(timestamp == null){
	        		logger.error("Response validation failed as timestamp not present");
					logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
					logger.error("------------------------------------------------------------------");
		        	test.fail("Response validation failed as timestamp not present");
	        	}
	        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, reqFormatted,"", "", Wsstatus, ""+Wscode,
						responsestr, "Fail", "userName"+expectMessage );
        	Assert.fail("Test Failed");
	        }
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception thrown when executing the test case: "+e);
			logger.error("Execution is completed for Failed Test Case No. "+testCaseID);
			logger.error("------------------------------------------------------------------");
			test.fail("Exception thrown when executing the test case: "+e);
        	ex.writeExcel(fileName, testCaseID, TestCaseDescription, scenarioType, "", "", "", "", "",
					"", "Fail", ""+e );
        	Assert.fail("Test Failed");
		}
	}
	
	

	//***get the values from test data sheet
	public void testDataFields(String scenarioName, String testCaseId)
	{
		HashMap<String, LinkedHashMap<String, String>> inputData1 = null;
		try {
			inputData1 = ex.getTestData(scenarioName);
		} catch (IOException e) {
			e.printStackTrace();
			ex.writeExcel(fileName, testCaseId, "", "", "", "", "", "", "", "", "Fail", "Exception: "+e.toString());
			test.fail("Unable to retrieve the test data file/fields");
		}
		TestCaseDescription = inputData1.get(testCaseId).get("TestCaseDescription");
		scenarioType = inputData1.get(testCaseId).get("Scenario Type");
		userId = inputData1.get(testCaseId).get("UserName");
		countryNumberCd = inputData1.get(testCaseId).get("countryNumberCd");
        countryCd = inputData1.get(testCaseId).get("countryCd");
        threeCharCountryCd = inputData1.get(testCaseId).get("threeCharCountryCd");
        independentFlag = inputData1.get(testCaseId).get("independentFlag");
        postalFormatDescription = inputData1.get(testCaseId).get("postalFormatDescription");
        postalFlag = inputData1.get(testCaseId).get("postalFlag");
        postalLengthNumber = inputData1.get(testCaseId).get("postalLengthNumber");
        firstWorkWeekDayName = inputData1.get(testCaseId).get("firstWorkWeekDayName");
        lastWorkWeekDayName = inputData1.get(testCaseId).get("lastWorkWeekDayName");
        weekendFirstDayName = inputData1.get(testCaseId).get("weekendFirstDayName");
        internetDomainName = inputData1.get(testCaseId).get("internetDomainName");
        dependentRelationshipId = inputData1.get(testCaseId).get("dependentRelationshipId");
        dependentCountryCd = inputData1.get(testCaseId).get("dependentCountryCd");
        countryEffectiveDate = inputData1.get(testCaseId).get("countryEffectiveDate");
        countryExpirationDate = inputData1.get(testCaseId).get("countryExpirationDate");
        intialDialingPrefixCd = inputData1.get(testCaseId).get("intialDialingPrefixCd");
        intialDialingCd = inputData1.get(testCaseId).get("intialDialingCd");
        landPhMaxLthNbr = inputData1.get(testCaseId).get("landPhMaxLthNbr");
        landPhMinLthNbr = inputData1.get(testCaseId).get("landPhMinLthNbr");
        moblPhMaxLthNbr = inputData1.get(testCaseId).get("moblPhMaxLthNbr");
        moblPhMinLthNbr = inputData1.get(testCaseId).get("moblPhMinLthNbr");
        countryDialingsEffectiveDate = inputData1.get(testCaseId).get("countryDialingsEffectiveDate");
        countryDialingsExpirationDate = inputData1.get(testCaseId).get("countryDialingsExpirationDate");
        currencyNumberCd = inputData1.get(testCaseId).get("currencyNumberCd");
        currencyCd = inputData1.get(testCaseId).get("currencyCd");
        minorUnitCd = inputData1.get(testCaseId).get("minorUnitCd");
        moneyFormatDescription = inputData1.get(testCaseId).get("moneyFormatDescription");
        currenciesEffectiveDate = inputData1.get(testCaseId).get("currenciesEffectiveDate");
        currenciesExpirationDate = inputData1.get(testCaseId).get("currenciesExpirationDate");
        uomTypeCd = inputData1.get(testCaseId).get("uomTypeCd");
        geopoliticalUnitOfMeasuresEffectiveDate = inputData1.get(testCaseId).get("geopoliticalUnitOfMeasuresEffectiveDate");
        geopoliticalUnitOfMeasuresExpirationDate = inputData1.get(testCaseId).get("geopoliticalUnitOfMeasuresExpirationDate");
        holidayName = inputData1.get(testCaseId).get("holidayName");
        geopoliticalHolidaysEffectiveDate = inputData1.get(testCaseId).get("geopoliticalHolidaysEffectiveDate");
        geopoliticalHolidaysExpirationDate = inputData1.get(testCaseId).get("geopoliticalHolidaysExpirationDate");
        affilTypeCd = inputData1.get(testCaseId).get("affilTypeCd");
        geopoliticalAffiliationsEffectiveDate = inputData1.get(testCaseId).get("geopoliticalAffiliationsEffectiveDate");
        geopoliticalAffiliationsExpirationDate = inputData1.get(testCaseId).get("geopoliticalAffiliationsExpirationDate");
        localesLanguageCd = inputData1.get(testCaseId).get("localesLanguageCd");
        localeCd = inputData1.get(testCaseId).get("localeCd");
        localesScriptCd = inputData1.get(testCaseId).get("localesScriptCd");
        cldrVersionNumber = inputData1.get(testCaseId).get("cldrVersionNumber");
        cldrVersionDate = inputData1.get(testCaseId).get("cldrVersionDate");
        dateFullFormatDescription  = inputData1.get(testCaseId).get("dateFullFormatDescription");
        dateLongFormatDescription = inputData1.get(testCaseId).get("dateLongFormatDescription");
        dateMediumFormatDescription = inputData1.get(testCaseId).get("dateMediumFormatDescription");
        dateShortFormatDescription = inputData1.get(testCaseId).get("dateShortFormatDescription");
        localesEffectiveDate = inputData1.get(testCaseId).get("localesEffectiveDate");
        localesExpirationDate = inputData1.get(testCaseId).get("localesExpirationDate");
        translationGeopoliticalsLanguageCd = inputData1.get(testCaseId).get("translationGeopoliticalsLanguageCd");
        translationGeopoliticalsScriptCd = inputData1.get(testCaseId).get("translationGeopoliticalsScriptCd");
        translationName = inputData1.get(testCaseId).get("translationName");
        versionNumber = inputData1.get(testCaseId).get("versionNumber");
        versionDate = inputData1.get(testCaseId).get("versionDate");
        translationGeopoliticalsEffectiveDate = inputData1.get(testCaseId).get("translationGeopoliticalsEffectiveDate");
        translationGeopoliticalsExpirationDate = inputData1.get(testCaseId).get("translationGeopoliticalsExpirationDate");
        geopoliticalTypeName = inputData1.get(testCaseId).get("geopoliticalTypeName");
       
	}
}

